---
- name: Create local grafana dashboard directories
  become: false
  file:
    path: /tmp/dashboards
    state: directory
    mode: 0755
  delegate_to: localhost
  run_once: true

- name: download grafana dashboard from grafana.net to local folder
  become: false
  get_url:
    url: "https://grafana.com/api/dashboards/{{ item.dashboard_id }}/revisions/{{ item.revision_id }}/download"
    dest: "/tmp/dashboards/{{ item.dashboard_id }}.json"
  register: _download_dashboards
  until: _download_dashboards is succeeded
  retries: 5
  delay: 2
  delegate_to: localhost
  run_once: true
  with_items: "{{ grafana_dashboards }}"
  when: grafana_dashboards | length > 0

# As noted in [1] an exported dashboard replaces the exporter's datasource
# name with a representative name, something like 'DS_GRAPHITE'. The name
# is different for each datasource plugin, but always begins with 'DS_'.
# In the rest of the data, the same name is used, but captured in braces,
# for example: '${DS_GRAPHITE}'.
#
# [1] http://docs.grafana.org/reference/export_import/#import-sharing-with-grafana-2-x-or-3-0
#
# The data structure looks (massively abbreviated) something like:
#
#   "name": "DS_GRAPHITE",
#   "datasource": "${DS_GRAPHITE}",
#
# If we import the downloaded dashboard verbatim, it will not automatically
# be connected to the data source like we want it. The Grafana UI expects
# us to do the final connection by hand, which we do not want to do.
# So, in the below task we ensure that we replace instances of this string
# with the data source name we want.
# To make sure that we're not being too greedy with the regex replacement
# of the data source to use for each dashboard that's uploaded, we make the
# regex match very specific by using the following:
#
# 1. Literal boundaries for " on either side of the match.
# 2. Non-capturing optional group matches for the ${} bits which may, or
#    or may not, be there..
# 3. A case-sensitive literal match for DS .
# 4. A one-or-more case-sensitive match for the part that follows the
#    underscore, with only A-Z, 0-9 and - or _ allowed.
#
# This regex can be tested and understood better by looking at the
# matches and non-matches in https://regex101.com/r/f4Gkvg/6

- name: Set the correct data source name in the dashboard
  become: false
  replace:
    dest: "/tmp/dashboards/{{ item.dashboard_id }}.json"
    regexp: '"(?:\${)?DS_[A-Z0-9_-]+(?:})?"'
    replace: '"{{ item.datasource }}"'
  delegate_to: localhost
  run_once: true
  with_items: "{{ grafana_dashboards }}"
  when: grafana_dashboards | length > 0

- name: copy local grafana dashboards
  become: false
  copy:
    src: "{{ item }}"
    dest: "/tmp/dashboards/{{ item | basename }}"
  with_fileglob:
    - "{{ grafana_dashboards_dir }}/*.json"
  delegate_to: localhost
  run_once: true

- name: import grafana dashboards
  uri:
    url: "{{ grafana_api_url }}/api/dashboards/db"
    user: "{{ grafana_security.admin_user }}"
    password: "{{ grafana_security.admin_password }}"
    force_basic_auth: true
    method: POST
    body_format: json
    body: '{ "dashboard": {{ lookup("file", item) }}, "overwrite": true, "message": "Updated by ansible" }'
  no_log: true
  with_fileglob:
    - "/tmp/dashboards/*"

# TODO: uncomment this when ansible 2.7 will be min supported version
# - name: import grafana dashboards
#   grafana_dashboard:
#     grafana_url: "{{ grafana_api_url }}"
#     grafana_user: "{{ grafana_security.admin_user }}"
#     grafana_password: "{{ grafana_security.admin_password }}"
#     path: "/tmp/dashboards/{{ item }}"
#     message: Updated by ansible
#     state: present
#     overwrite: true
#   no_log: true
#   with_fileglob:
#     - "/tmp/dashboards/*"
